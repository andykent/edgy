# Edgy 
# (c) Copyright 2008 Andy Kent. All Rights Reserved.

require 'fileutils'
require 'yaml'
require 'digest/sha1'
require 'net/http'


TEMP          = File.join('/tmp', "edgy")
CONFIG        = "http://edgy.4ninjas.org/sources.yml" 
INFO          = "http://edgy.4ninjas.org/info.yml" 
# CONFIG        = File.join(File.dirname(__FILE__), "sources.yml")
EDGY_VERSION  = 0.1

namespace :edgy do
  desc "Show the current version of Edgy that is installed"
  task :version do
    puts '-'*70
    puts "Currently running on Edgy version #{EDGY_VERSION}"
    puts '-'*70
  end
  
  desc "This updates Edgy to the latest stable version"
  task :self_update do
    if info['stable_version'] < EDGY_VERSION
      puts "*"*70
      puts "SELF UPDATING: You have an old version of Edgy...upgrading from #{EDGY_VERSION} to #{info['stable_version']}..."
      puts "*"*70
      `sake -T http://edgy.4ninjas.org/edgy.sake`
    end
  end
  
  desc "Show available packages"
  task :list => [:self_update] do
    puts '-'*70
    puts "Packages available from #{CONFIG}"
    puts '-'*70
    max = config.keys.map {|k| k.length}.max
    config.to_a.sort {|a,b| a[0]<=>b[0] }.each do |pkg, info|
      puts "#{pkg.rjust(max)} | #{info['description'] || 'No description provided'}"
    end
  end

  desc "Build the specified packages from source"
  task :install => [:self_update] do
    if ENV['packages']
      packages = ENV['packages'].split(' ')
    else
      puts "You need to specify some packages using packages='pkg1 pkg2'"
      exit
    end
    clean_up
    packages.each do |pkg|
      install(pkg)
    end
    clean_up
    puts "*"*70
    puts "Woohoo! We're all done."
    puts "*"*70
  end
end

def config
  @config ||= load_yaml_from(CONFIG)
end

def info
  @info ||= load_yaml_from(INFO)
end

def load_yaml_from(location)
  if location.match(/http:\/\//)
    YAML.load(Net::HTTP.get(URI.parse(location)))
  else
    YAML.load_file(location)
  end
end

def install(pkg)
  puts "*"*70
  unless options = config[pkg]
    puts "ERROR: #{pkg} package description not found in #{CONFIG}...skipping #{pkg}"
    return 
  end
  puts "BUILDING:: #{pkg}..."
  if options['dependencies']
    dependencies = options['dependencies'].split(' ')
    puts "#{pkg} requires #{dependencies.length} other package#{'s' unless dependencies.length==0} - #{dependencies.join(', ')}"
    dependencies.each do |dependency|
      install(dependency)
    end
  end
  build(pkg, options['repository'], options['install_path'], options['clean'], options['command']) if options['repository']
end

def build(pkg, repo, install_path=nil, clean=false, command=nil)
  install_path ||= './'
  install_path = File.join temp_dir_for(repo), install_path
  cd_to_temp
  unless File.exists?(temp_dir_for(repo))
    puts "CLONING:: #{pkg} from #{repo}..."
    `git clone #{repo} #{temp_dir_for(repo)}`
  end
  remove_pkg(pkg) if clean
  command ? install_pkg_with_command(pkg, install_path, command) : install_pkg_with_rake(pkg, install_path)
end

def remove_pkg(pkg)
  puts "REMOVING:: a clean install is required so uninstalling #{pkg} before attempting install..."
  `gem uninstall -a -i #{pkg}`
end

def install_pkg_with_rake(pkg, rake_dir)
  cd rake_dir
  puts "INSTALLING:: #{pkg} from rake file: #{rake_dir}"
  `sudo rake install`
end

def install_pkg_with_command(pkg, install_path, command)
  cd install_path
  puts "INSTALLING:: #{pkg} with custom command: #{command}"
  `#{command}`
end

def cd_to_temp
  mkdir TEMP unless File.exists? TEMP
  cd TEMP
end

def clean_up
  cd_to_temp 
  if Dir.entries(pwd).reject {|e| e =~ /^\./}.any? # craxy way of find if DIR is empty accept for hidden files
    puts "\nCleaning up #{pwd}..."
    `sudo rm -rf ./*`
  end
end

def temp_dir_for(repo)
  sha1 = Digest::SHA1.hexdigest(repo)
  "#{TEMP}/#{sha1}"
end